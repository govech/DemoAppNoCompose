name: Release
# workflow 名称，显示在 GitHub Actions 页面

on:
  push:
    tags:
      - 'v*'
# 触发条件：当 push 一个以 "v" 开头的 tag 时（如 v1.0.0）
# 仅在打 tag 时触发，不会在普通 commit 时触发

permissions:
  contents: write
  # 需要写权限来创建 release

jobs:
  build-release:
    runs-on: ubuntu-latest
    # 指定 runner 运行环境，这里使用最新的 Ubuntu

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # 拉取当前仓库代码到 runner 工作目录

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
        # 配置 Java 17 环境，用于 Gradle 构建 Android 项目

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
        # 缓存 Gradle 依赖和 wrapper，加快构建速度
        # key 使用 hash 方式保证当 build 脚本或 wrapper 改变时刷新缓存

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        # 给 gradlew 文件添加可执行权限，否则可能报权限错误

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        # 从 Git tag 中提取版本号
        # GITHUB_REF 例子：refs/tags/v1.0.0
        # 通过 bash 字符串裁剪去掉 refs/tags/ 前缀
        # 输出 VERSION 给后续步骤使用

      - name: Build release APK
        run: ./gradlew assembleRelease
        env:
          VERSION_NAME: ${{ steps.get_version.outputs.VERSION }}
        # 执行 Gradle 构建 release APK
        # 将版本号通过环境变量传给 Gradle（如果你在 build.gradle 中使用 VERSION_NAME）

      - name: List generated APK files
        run: |
          echo "=== Generated APK files ==="
          find app/build/outputs/apk/release/ -name "*.apk" -type f || echo "No APK files found"
          ls -la app/build/outputs/apk/release/ || echo "Release directory not found"
          echo "=== All build outputs ==="
          find app/build/outputs/ -name "*.apk" -type f || echo "No APK files in outputs"
        # 列出生成的APK文件，用于调试文件路径问题

      # --- 判断 keystore 是否存在 ---
      - name: Check if signing key exists
        id: check_key
        env:
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
        run: |
          if [ -z "$KEYSTORE_FILE" ]; then
            echo "exists=false" >> $GITHUB_OUTPUT
          else
            echo "exists=true" >> $GITHUB_OUTPUT
          fi
        # 这里通过 secrets.KEYSTORE_FILE 环境变量传给 shell
        # 如果 KEYSTORE_FILE 为空，说明没有设置签名信息
        # 输出 exists=true/false 给后续步骤条件判断

      # --- 签名 APK（仅在 keystore 存在时执行） ---
      - name: Sign APK
        if: steps.check_key.outputs.exists == 'true'
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.KEYSTORE_FILE }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
        # 使用签名工具对 APK 进行签名
        # 仅当 keystore 存在时执行
        # 通过 secrets 传递敏感信息
        # releaseDirectory 指定要签名的 APK 目录

      # --- 查找并重命名APK文件 ---
      - name: Prepare APK for release
        run: |
          # 查找生成的APK文件
          APK_FILE=$(find app/build/outputs/apk/release/ -name "*.apk" -type f | head -1)
          if [ -z "$APK_FILE" ]; then
            echo "Error: No APK file found!"
            exit 1
          fi
          
          # 重命名APK文件
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          NEW_NAME="DemoApp-${VERSION}.apk"
          cp "$APK_FILE" "app/build/outputs/apk/release/$NEW_NAME"
          
          echo "APK_FILE_PATH=app/build/outputs/apk/release/$NEW_NAME" >> $GITHUB_ENV
          echo "APK prepared: $NEW_NAME"

      # --- 创建 GitHub Release ---
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: ${{ env.APK_FILE_PATH }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## 更新内容

            ### 新功能
            
            
            ### 改进
            - 性能优化
            - UI/UX 改进

            ### 修复
            - 修复CI/CD报错问题
            - 修复了detekt报错问题

            ### 技术改进

        # 将 APK 上传并创建 GitHub Release
        # 使用上一步提取的 VERSION 作为 tag_name
        # draft/prerelease 可根据需要修改
        # body 用 markdown 写 Release Notes
        # files 指定要上传的 APK 文件
